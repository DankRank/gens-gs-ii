PROJECT(gens-gs-ii)
cmake_minimum_required(VERSION 2.6)

list (APPEND CMAKE_MODULE_PATH "${gens-gs-ii_SOURCE_DIR}/CMake")

# Git version information.
ADD_CUSTOM_TARGET(git_version ALL
	${gens-gs-ii_SOURCE_DIR}/git_version.sh -s "${gens-gs-ii_SOURCE_DIR}" -o "${gens-gs-ii_BINARY_DIR}/git_version.h"
	VERBATIM
)

# Hack to remove -rdynamic from CFLAGS and CXXFLAGS
# See http://public.kitware.com/pipermail/cmake/2006-July/010404.html
IF(CMAKE_SYSTEM_NAME STREQUAL "Linux")
	SET(CMAKE_SHARED_LIBRARY_LINK_C_FLAGS)
	SET(CMAKE_SHARED_LIBRARY_LINK_CXX_FLAGS)
ENDIF()

# Don't embed rpaths in the executables.
SET(CMAKE_SKIP_RPATH ON)

# If no build type is set, default to "debug".
IF(CMAKE_BUILD_TYPE MATCHES ^$)
	SET(CMAKE_BUILD_TYPE "debug")
ENDIF()

# Don't bother with verbose makefiles for now.
# TODO: Make it an option?
#IF (CMAKE_BUILD_TYPE MATCHES ^debug$)
#	SET(CMAKE_VERBOSE_MAKEFILE ON)
#ENDIF()

# Check what flag is needed for C99 support.
INCLUDE(CheckC99CompilerFlag)
CHECK_C99_COMPILER_FLAG(GENS_C99_CFLAG)

# Test for common CFLAGS and CXXFLAGS.
INCLUDE(CheckCCompilerFlag)
INCLUDE(CheckCXXCompilerFlag)
SET(GENS_CFLAGS_COMMON "")
SET(GENS_CXXFLAGS_COMMON "")
FOREACH(FLAG_TEST "-Wall" "-Wextra")
	CHECK_C_COMPILER_FLAG("${FLAG_TEST}" CFLAG_${FLAG_TEST})
	IF(CFLAG_${FLAG_TEST})
		SET(GENS_CFLAGS_COMMON "${GENS_CFLAGS_COMMON} ${FLAG_TEST}")
	ENDIF(CFLAG_${FLAG_TEST})
	UNSET(CFLAG_${FLAG_TEST})
	
	CHECK_CXX_COMPILER_FLAG("${FLAG_TEST}" CXXFLAG_${FLAG_TEST})
	IF(CXXFLAG_${FLAG_TEST})
		SET(GENS_CXXFLAGS_COMMON "${GENS_CXXFLAGS_COMMON} ${FLAG_TEST}")
	ENDIF(CXXFLAG_${FLAG_TEST})
	UNSET(CXXFLAG_${FLAG_TEST})
ENDFOREACH()

# Test for common LDFLAGS.
SET(GENS_LDFLAGS_COMMON "")
FOREACH(FLAG_TEST "-Wl,-O1" "-Wl,--sort-common" "-Wl,--as-needed")
	CHECK_C_COMPILER_FLAG("${FLAG_TEST}" LDFLAG_${FLAG_TEST})
	IF(LDFLAG_${FLAG_TEST})
		SET(GENS_LDFLAGS_COMMON "${GENS_LDFLAGS_COMMON} ${FLAG_TEST}")
	ENDIF(LDFLAG_${FLAG_TEST})
	UNSET(LDFLAG_${FLAG_TEST})
ENDFOREACH()

# Platform-specific CFLAGS/CXXFLAGS.
IF(WIN32)
	SET(GENS_CFLAGS_PLATFORM "-gstabs -fshort-wchar")
	SET(GENS_CXXFLAGS_PLATFORM "-gstabs -fshort-wchar")
	
	# Test for static libgcc/libstdc++.
	SET(GENS_LDFLAGS_PLATFORM "")
	FOREACH(FLAG_TEST "-static-libgcc" "-static-libstdc++")
		CHECK_C_COMPILER_FLAG("${FLAG_TEST}" LDFLAG_${FLAG_TEST})
		IF(LDFLAG_${FLAG_TEST})
			SET(GENS_LDFLAGS_PLATFORM "${GENS_LDFLAGS_PLATFORM} ${FLAG_TEST}")
		ENDIF(LDFLAG_${FLAG_TEST})
		UNSET(LDFLAG_${FLAG_TEST})
	ENDFOREACH()
ELSEIF(UNIX)
	SET(GENS_CFLAGS_PLATFORM "-ggdb")
	SET(GENS_CXXFLAGS_PLATFORM "-ggdb")
	SET(GENS_LDFLAGS_PLATFORM "")
ENDIF()

# Set CFLAGS/CXXFLAGS based on build type.
SET(CMAKE_C_FLAGS_DEBUG			"-O0 ${GENS_C99_CFLAG} ${GENS_CFLAGS_COMMON} ${GENS_CFLAGS_PLATFORM}")
SET(CMAKE_CXX_FLAGS_DEBUG		"-O0 ${GENS_CXXFLAGS_COMMON} ${GENS_CXXFLAGS_PLATFORM}")
SET(CMAKE_C_FLAGS_RELEASE		"-O2 -march=i586 -mtune=i686 ${GENS_C99_CFLAG} ${GENS_CFLAGS_COMMON} ${GENS_CFLAGS_PLATFORM}")
SET(CMAKE_CXX_FLAGS_RELEASE		"-O2 -march=i586 -mtune=i686 ${GENS_CXXFLAGS_COMMON} ${GENS_CXXFLAGS_PLATFORM}")
SET(CMAKE_EXE_LINKER_FLAGS_DEBUG	"${GENS_LDFLAGS_COMMON} ${GENS_LDFLAGS_PLATFORM}")
SET(CMAKE_EXE_LINKER_FLAGS_RELEASE	"${GENS_LDFLAGS_COMMON} ${GENS_LDFLAGS_PLATFORM}")

# Unset the temporary variables.
UNSET(GENS_C99_CFLAG)
UNSET(GENS_CFLAGS_COMMON)
UNSET(GENS_CFLAGS_PLATFORM)
UNSET(GENS_LDFLAGS_COMMON)
UNSET(GENS_LDFLAGS_PLATFORM)

# Project subdirectories
SUBDIRS(src)
