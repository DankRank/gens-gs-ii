PROJECT(gens-gs-ii)

# Version dependencies:
# - BREAK(): CMake 2.6.0
CMAKE_MINIMUM_REQUIRED(VERSION 2.6.0)

# UNSET() was added in cmake-2.6.3.
# Define an equivalent macro for older versions.
MACRO(UNSET var)
	SET(${var})
ENDMACRO(UNSET)

list (APPEND CMAKE_MODULE_PATH "${gens-gs-ii_SOURCE_DIR}/CMake")

# Git version information.
ADD_CUSTOM_TARGET(git_version ALL
	${gens-gs-ii_SOURCE_DIR}/git_version.sh -s "${gens-gs-ii_SOURCE_DIR}" -o "${gens-gs-ii_BINARY_DIR}/git_version.h"
	VERBATIM
)

# Hack to remove -rdynamic from CFLAGS and CXXFLAGS
# See http://public.kitware.com/pipermail/cmake/2006-July/010404.html
IF(CMAKE_SYSTEM_NAME STREQUAL "Linux")
	SET(CMAKE_SHARED_LIBRARY_LINK_C_FLAGS)
	SET(CMAKE_SHARED_LIBRARY_LINK_CXX_FLAGS)
ENDIF()

# Don't embed rpaths in the executables.
SET(CMAKE_SKIP_RPATH ON)

# If no build type is set, default to "debug".
IF(CMAKE_BUILD_TYPE MATCHES ^$)
	SET(CMAKE_BUILD_TYPE "debug")
ENDIF()

# Don't bother with verbose makefiles for now.
# TODO: Make it an option?
#IF (CMAKE_BUILD_TYPE MATCHES ^debug$)
#	SET(CMAKE_VERBOSE_MAKEFILE ON)
#ENDIF()

# If we're not using x86, disable emulation functionality.
# TODO: Port everything from asm to C/C++!
INCLUDE(CheckSystemX8632)
CHECK_SYSTEM_X86_32(GENS_ENABLE_EMULATION)
IF(GENS_ENABLE_EMULATION)
ELSE()
	MESSAGE(WARNING "System is not X86_32; CPU emulation will be disabled. (FOR DEBUGGING ONLY)")
ENDIF()

# Check what flag is needed for C99 support.
INCLUDE(CheckC99CompilerFlag)
CHECK_C99_COMPILER_FLAG(GENS_C99_CFLAG)

# Disable C++ RTTI.
INCLUDE(CheckCXXNoRTTICompilerFlag)
CHECK_CXX_NO_RTTI_COMPILER_FLAG(GENS_CXX_NO_RTTI_CXXFLAG)

# Disable C++ exceptions.
INCLUDE(CheckCXXNoExceptionsCompilerFlag)
CHECK_CXX_NO_EXCEPTIONS_COMPILER_FLAG(GENS_CXX_NO_EXCEPTIONS_CXXFLAG)

# Test for common CFLAGS and CXXFLAGS.
INCLUDE(CheckCCompilerFlag)
INCLUDE(CheckCXXCompilerFlag)
SET(GENS_CFLAGS_COMMON "")
SET(GENS_CXXFLAGS_COMMON "${GENS_CXX_NO_RTTI_CFLAG} ${GENS_CXX_NO_EXCEPTIONS_CFLAG}")
FOREACH(FLAG_TEST "-Wall" "-Wextra")
	CHECK_C_COMPILER_FLAG("${FLAG_TEST}" CFLAG_${FLAG_TEST})
	IF(CFLAG_${FLAG_TEST})
		SET(GENS_CFLAGS_COMMON "${GENS_CFLAGS_COMMON} ${FLAG_TEST}")
	ENDIF(CFLAG_${FLAG_TEST})
	UNSET(CFLAG_${FLAG_TEST})
	
	CHECK_CXX_COMPILER_FLAG("${FLAG_TEST}" CXXFLAG_${FLAG_TEST})
	IF(CXXFLAG_${FLAG_TEST})
		SET(GENS_CXXFLAGS_COMMON "${GENS_CXXFLAGS_COMMON} ${FLAG_TEST}")
	ENDIF(CXXFLAG_${FLAG_TEST})
	UNSET(CXXFLAG_${FLAG_TEST})
ENDFOREACH()

# Test for common LDFLAGS.
# TODO: Doesn't work on OS X. (which means it's not really testing it!)
IF(APPLE)
	# TODO: CHECK_C_COMPILER_FLAG() doesn't work properly for LDFLAGS!
	SET(GENS_LDFLAGS_COMMON "")
ELSE(APPLE)
SET(GENS_LDFLAGS_COMMON "")
FOREACH(FLAG_TEST "-Wl,-O1" "-Wl,--sort-common" "-Wl,--as-needed")
	CHECK_C_COMPILER_FLAG("${FLAG_TEST}" LDFLAG_${FLAG_TEST})
	IF(LDFLAG_${FLAG_TEST})
		SET(GENS_LDFLAGS_COMMON "${GENS_LDFLAGS_COMMON} ${FLAG_TEST}")
	ENDIF(LDFLAG_${FLAG_TEST})
	UNSET(LDFLAG_${FLAG_TEST})
ENDFOREACH()
ENDIF(APPLE)

# Platform-specific CFLAGS/CXXFLAGS.
IF(WIN32)
	SET(GENS_CFLAGS_PLATFORM "-gstabs -fshort-wchar")
	SET(GENS_CXXFLAGS_PLATFORM "-gstabs -fshort-wchar")
	
	# Test for static libgcc/libstdc++.
	SET(GENS_LDFLAGS_PLATFORM "")
	FOREACH(FLAG_TEST "-static-libgcc" "-static-libstdc++")
		CHECK_C_COMPILER_FLAG("${FLAG_TEST}" LDFLAG_${FLAG_TEST})
		IF(LDFLAG_${FLAG_TEST})
			SET(GENS_LDFLAGS_PLATFORM "${GENS_LDFLAGS_PLATFORM} ${FLAG_TEST}")
		ENDIF(LDFLAG_${FLAG_TEST})
		UNSET(LDFLAG_${FLAG_TEST})
	ENDFOREACH()
ELSEIF(UNIX)
	SET(GENS_CFLAGS_PLATFORM "-ggdb")
	SET(GENS_CXXFLAGS_PLATFORM "-ggdb")
	SET(GENS_LDFLAGS_PLATFORM "")
ENDIF()

# Enable windres support on MinGW.
# http://www.cmake.org/Bug/view.php?id=4068
IF(MINGW)
	SET(CMAKE_RC_COMPILER_INIT windres)
	ENABLE_LANGUAGE(RC)
	
	# NOTE: Setting CMAKE_RC_OUTPUT_EXTENSION doesn't seem to work.
	# Force windres to output COFF, even though it'll use the .res extension.
	SET(CMAKE_RC_OUTPUT_EXTENSION .obj)
	SET(CMAKE_RC_COMPILE_OBJECT
		"<CMAKE_RC_COMPILER> --output-format=coff <FLAGS> <DEFINES> -o <OBJECT> <SOURCE>")
ENDIF(MINGW)

# Check for zlib.
# If zlib isn't found, src/extlib/zlib/ will be used instead.
# TODO: Figure out how to move this all to src/extlib/.
# It's here now because otherwise the INCLUDE_DIRECTORIES() stuff
# won't propagate to all the projects correctly.
FIND_PACKAGE(ZLIB)
SET(HAVE_ZLIB 1)
IF(ZLIB_FOUND)
	INCLUDE_DIRECTORIES(${ZLIB_INCLUDE_DIR})
ELSE(ZLIB_FOUND)
	INCLUDE_DIRECTORIES("${CMAKE_CURRENT_SOURCE_DIR}/src/extlib/zlib")
	INCLUDE_DIRECTORIES("${CMAKE_CURRENT_BINARY_DIR}/src/extlib/zlib")
ENDIF(ZLIB_FOUND)

# Set CFLAGS/CXXFLAGS based on build type.
# TODO: Move -DQT_NO_DEBUG to gens-qt4?
SET(CMAKE_C_FLAGS_DEBUG			"-O0 ${GENS_C99_CFLAG} ${GENS_CFLAGS_COMMON} ${GENS_CFLAGS_PLATFORM}")
SET(CMAKE_CXX_FLAGS_DEBUG		"-O0 ${GENS_CXXFLAGS_COMMON} ${GENS_CXXFLAGS_PLATFORM}")
SET(CMAKE_C_FLAGS_RELEASE		"-O2 -march=i686 -DNDEBUG -DQT_NO_DEBUG ${GENS_C99_CFLAG} ${GENS_CFLAGS_COMMON} ${GENS_CFLAGS_PLATFORM}")
SET(CMAKE_CXX_FLAGS_RELEASE		"-O2 -march=i686 -DNDEBUG -DQT_NO_DEBUG ${GENS_CXXFLAGS_COMMON} ${GENS_CXXFLAGS_PLATFORM}")
SET(CMAKE_EXE_LINKER_FLAGS_DEBUG	"${GENS_LDFLAGS_COMMON} ${GENS_LDFLAGS_PLATFORM}")
SET(CMAKE_EXE_LINKER_FLAGS_RELEASE	"${GENS_LDFLAGS_COMMON} ${GENS_LDFLAGS_PLATFORM}")

# Unset the temporary variables.
UNSET(GENS_C99_CFLAG)
UNSET(GENS_CFLAGS_COMMON)
UNSET(GENS_CFLAGS_PLATFORM)
UNSET(GENS_LDFLAGS_COMMON)
UNSET(GENS_LDFLAGS_PLATFORM)

# Project subdirectories.
ADD_SUBDIRECTORY(src)
